<?php

use Drupal\Core\File\FileSystemInterface;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;

/**
 * Implements hook_cron().
 */
function os2web_edoc_file_import_cron() {
  // Get the import path from configuration.
  $config = \Drupal::config('os2web_edoc_file_import.settings');
  $import_path = $config->get('import_path');
  if (!file_exists($import_path)) {
    \Drupal::logger('os2web_edoc_file_import')->error('The import path does not exist. (PATH: /var/www/edoc_filer)');
    return;
  }

  $xml_files = \Drupal::service('file_system')->scanDirectory($import_path, "/\.xml$/i", ['recurse' => FALSE]);
  foreach ($xml_files as $file) {
    os2web_edoc_file_import_process_file($file);
  }
}

/**
 * Checks if a case with the given CaseNumber exists.
 *
 * @param string $caseNumber
 *   The CaseNumber to check.
 *
 * @return \Drupal\node\Entity\Node|null
 *   The case node if found, or NULL if not.
 */
function os2web_edoc_case_exists($caseNumber) {
  $cases = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'esdh_case', 'field_sagsnummer' => $caseNumber]);
  return !empty($cases) ? reset($cases) : NULL;
}

/**
 * Creates or updates a case based on XML data.
 */
function os2web_edoc_file_import_create_or_update_case($xml) {
  $trans = \Drupal::transliteration(); // Transliteration service
  $caseNumber = (string) $xml->CaseNumber;

  $case = os2web_edoc_case_exists($caseNumber);

  if (!$case) {
    // If case does not exist, create a new one.
    $case = Node::create([
      'type' => 'esdh_case',
      'title' => $trans->transliterate((string) $xml->CaseName),
      'field_sagsnummer' => $caseNumber,
      'field_case_name' => $trans->transliterate((string) $xml->CaseName),
    ]);
    \Drupal::logger('os2web_edoc_file_import')->info('Created new case: ' . $caseNumber);
  } else {
    // If case exists, update it.
    $case->setTitle($trans->transliterate((string) $xml->CaseName));
    $case->set('field_case_name', $trans->transliterate((string) $xml->CaseName));
    \Drupal::logger('os2web_edoc_file_import')->info('Updated case: ' . $caseNumber);
  }

  $case->save();
  \Drupal::logger('os2web_edoc_file_import')->info('Saved case with ID: ' . $case->id());

  return $case;
}

/**
 * Creates or updates a document based on XML data.
 */
function os2web_edoc_file_import_create_or_update_document($xml, $case = NULL, $update = FALSE) {
  // Using transliteration to replace Danish chars.
  $trans = \Drupal::transliteration();

  $document = NULL;
  if ($update) {
    $documents = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'esdh_document', 'field_document_id' => (string) $xml->FileID]);
    $document = reset($documents);
    \Drupal::logger('os2web_edoc_file_import')->info('Loaded existing document for update: ' . (string) $xml->FileID);
  }

  if (!$document) {
    $config = \Drupal::config('os2web_edoc_file_import.settings');
    $import_path = $config->get('import_path');
    $fileName = (string) $xml->FileName;
    $fileId = (string) $xml->FileID;

    // Check if the file exists with the original name
    $filepath = "$import_path/Files/$fileId" . '_' . $fileName;
    if (!file_exists($filepath)) {
      // Try adding .pdf if the original file doesn't exist
      $filepath .= '.pdf';
    }

    // Ensure only PDF files are processed
    $ext = pathinfo($filepath, PATHINFO_EXTENSION);
    if (strtolower($ext) !== 'pdf') {
      \Drupal::logger('os2web_edoc_file_import')->warning('Skipped non-PDF file: ' . $filepath);
      return;
    }

    if (file_exists($filepath)) {
      $edocPublicDirectory = 'public://edoc_files';

      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
      $file_system = \Drupal::service('file_system');
      $file_system->prepareDirectory($edocPublicDirectory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
      $file_system->copy($filepath, $edocPublicDirectory . '/' . basename($filepath), FileSystemInterface::EXISTS_REPLACE);

      $file = File::create([
        'filename' => basename($fileName) . '.pdf',
        'uri' => $edocPublicDirectory . '/' . basename($filepath),
        'status' => 1,
        'uid' => 1,
      ]);
      $file->save();
      \Drupal::logger('os2web_edoc_file_import')->info('Created file entity for document: ' . (string) $xml->FileID);
    } else {
      \Drupal::logger('os2web_edoc_file_import')->error('File not found: ' . $filepath);
      return;
    }

    $document = Node::create([
      'type' => 'esdh_document',
      'title' => $trans->transliterate((string) $xml->FileName),
      'field_document_id' => (string) $xml->FileID,
      'field_document_title' => $trans->transliterate((string) $xml->FileName),
      'field_case_id' => (string) $xml->CaseNumber,
    ]);

    // Attach the file to the node's file field
    if ($file) {
      $document->set('field_case_file', [
        'target_id' => $file->id(),
        'display' => 1,
        'description' => $file->getFilename(),
      ]);
      \Drupal::logger('os2web_edoc_file_import')->info('Assigned file to document: ' . (string) $xml->FileID);
    }
    if ($case) {
      $document->set('field_case_reference', ['target_id' => $case->id(), 'target_type' => 'node']);
      \Drupal::logger('os2web_edoc_file_import')->info('Linked document to case: ' . $case->id());
    }
    $document->save();
  } else {
    $document->setTitle($trans->transliterate((string) $xml->FileName));
    $document->set('field_document_title', $trans->transliterate((string) $xml->FileName));
    $document->set('field_case_id', (string) $xml->CaseNumber);
    if ($case) {
      $document->set('field_case_reference', ['target_id' => $case->id(), 'target_type' => 'node']);
    }
    \Drupal::logger('os2web_edoc_file_import')->info('Updated document: ' . (string) $xml->FileID);
    $document->save();
  }

  if ($case) {
    // Update case to reference this document
    $case_documents = $case->get('field_case_documents')->getValue();
    $case_documents[] = ['target_id' => $document->id()];
    $case->set('field_case_documents', $case_documents);
    $case->save();
    \Drupal::logger('os2web_edoc_file_import')->info('Updated case to include document: ' . (string) $xml->FileID);
  }

  return $document;
}

/**
 * Deletes a document based on XML data.
 */
function os2web_edoc_file_import_delete_document($xml) {
  $documents = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['field_document_id' => (string) $xml->FileID]);
  $document = reset($documents);
  if ($document) {
    $document->delete();
    \Drupal::logger('os2web_edoc_file_import')->info('Deleted document: ' . (string) $xml->FileID);
  } else {
    \Drupal::logger('os2web_edoc_file_import')->warning('No document found to delete with FileID: ' . (string) $xml->FileID);
  }
}

/**
 * Processes a single XML file.
 */
function os2web_edoc_file_import_process_file($file) {
  $xml = simplexml_load_file($file->uri);
  \Drupal::logger('os2web_edoc_file_import')->info('Loaded XML file: ' . $file->uri);
  
  // Debugging: Log the XML content
  \Drupal::logger('os2web_edoc_file_import')->debug('XML content: ' . print_r($xml, TRUE));

  $fileName = (string) $xml->FileName;

  // Handle create, update, delete based on XML content.
  if (!empty($xml->Created)) {
    // Create a new case.
    if (!empty($xml->CaseNumber)) {
      \Drupal::logger('os2web_edoc_file_import')->info('Creating or updating case with CaseNumber: ' . (string) $xml->CaseNumber);
      $case = os2web_edoc_file_import_create_or_update_case($xml);
    }
    // Create a new document.
    if (!empty($xml->FileID)) {
      \Drupal::logger('os2web_edoc_file_import')->info('Creating or updating document with FileID: ' . (string) $xml->FileID);
      os2web_edoc_file_import_create_or_update_document($xml, isset($case) ? $case : NULL);
    }
  } elseif (!empty($xml->Updated)) {
    // Update existing case or document.
    if (!empty($xml->CaseNumber)) {
      \Drupal::logger('os2web_edoc_file_import')->info('Updating case with CaseNumber: ' . (string) $xml->CaseNumber . ' and FileID: ' . (string) $xml->FileID);
      $case = os2web_edoc_file_import_create_or_update_case($xml, TRUE);
    }
    if (!empty($xml->FileID)) {
      \Drupal::logger('os2web_edoc_file_import')->info('Updating document with FileID: ' . (string) $xml->FileID);
      os2web_edoc_file_import_create_or_update_document($xml, isset($case) ? $case : NULL, TRUE);
    }
  } elseif (!empty($xml->Deleted)) {
    // Delete existing document.
    if (!empty($xml->FileID)) {
      \Drupal::logger('os2web_edoc_file_import')->info('Deleting document with FileID: ' . (string) $xml->FileID);
      os2web_edoc_file_import_delete_document($xml);
    }
  }

  // Moving XML after processed
  $processed_path = dirname($file->uri) . '/processed';
  if (!file_exists($processed_path)) {
    mkdir($processed_path, 0755, TRUE);
    \Drupal::logger('os2web_edoc_file_import')->info('Created processed directory: ' . $processed_path);
  }

  $new_path = $processed_path . '/' . basename($file->uri);
  rename($file->uri, $new_path);
  \Drupal::logger('os2web_edoc_file_import')->info('Moved file to processed directory: ' . $new_path);

  // Delete the original file from the main folder (import folder)
  if (file_exists($file->uri)) {
    unlink($file->uri);
    \Drupal::logger('os2web_edoc_file_import')->info('Deleted original file from main folder: ' . $file->uri);
  }
}
